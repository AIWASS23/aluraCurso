ESLint

Para “chamar” o Eslint no VSC e organizar seu código automaticamente, utilize o atalho ctrl + shift + P 
(Windows/Linux) ou cmd + shift + P (MacOs), digite Eslint e escolha a opção "Fix all auto-fixable 
problems" ou posicione o cursor piscante sobre alguma das linhas sublinhadas vermelhas e utilize o atalho 
ctrl + . para abrir o menu do Eslint e escolher “Fix all auto-fixable problems” se estiver disponível.

https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint
https://eslint.org/
https://www.npmjs.com/package/eslint

Tipos de testes:

Testes estáticos:
- Voltados para analisar o código sem necessariamente executá-lo, verificando se algumas boas práticas e 
formatação padronizada foram adotadas na implementação;

Testes unitários 
- São utilizados para verificar o comportamento das menores unidades de código da aplicação;

Testes de integração:
- São as fases do teste de software em que módulos são combinados e testados como um conjunto;

Teste E2E (End-to-End): 
- É um método de teste utilizado para testar um fluxo da aplicação desde o começo até o fim.

-----------------------------------------------------------------------------------------------------

Assert nativo do Node.js

O próprio Node.js já nos oferece uma forma nativa de fazer asserções. A asserção de igualdade pode ser 
feita utilizando o método assert.strictEqual(atual, esperado, mensagem). Ou seja, podemos passar 2 
parâmetros que serão comparados e uma mensagem opcional para ser mostrada caso eles sejam diferentes.

https://nodejs.org/api/assert.html#assert

Jest com ESM

https://jestjs.io/pt-BR/docs/ecmascript-modules
https://jestjs.io/pt-BR/docs/configuration
https://jestjs.io/pt-BR/docs/manual-mocks

Cobertura de testes

File
A primeira coluna indica quais arquivos de teste do diretório estão sendo executados. Cada linha dessa 
coluna fornece as estatísticas para cada arquivo de teste localizado e executado pelo Jest.

Stmts
Esta coluna lista a porcentagem de statements do código que foram cobertos pelos testes. Em programação, 
um statement (ou declaração) é cada comando individual que damos ao programa para que ele execute 
instruções.

Branch
Sempre que o código de um programa apresenta ramificações no fluxo, por exemplo, blocos if…else ou switch, 
devemos garantir que todas as possibilidades sejam testadas. Ou seja, se existe um bloco if…else no 
programa, devemos escrever testes tanto para o código executado no bloco if quanto para o código executado 
no bloco else, e a porcentagem na coluna Branch mostra em quais arquivos há ramificações que precisam 
ter todas as suas condições testadas. Embora tenham o mesmo nome, não confundir estas branches com 
branches de versionamento do Git. O Jest não acessa o repositório do Git e nem há nenhum teste a ser 
feito nesse sentido.

Funcs
Informa qual a porcentagem de funções presentes em cada arquivo que foram executadas/chamadas pelos testes.

Lines
A porcentagem de linhas de código por onde os testes passaram durante a sua execução. Quando está em 100%, 
significa que os testes percorreram todas as linhas de código dos arquivos testados. Quando não está em 
100%, devemos observar a coluna seguinte (Uncovered Lines), que vai indicar por quais linhas o Jest não 
passou ao executar os testes nos arquivos.

Uncovered lines
Lista quais linhas de cada arquivo não foram percorridas pelo Jest. Você pode usar esta lista para 
consultar o código e pensar em quais testes podem ser adicionados para que estas linhas também sejam 
“cobertas”.

O Jest também fornece o relatório de cobertura de forma mais visual. Quando utilizamos a flag coverage, 
além de exibir o relatório no terminal, o Jest também cria a pasta coverage na raiz do projeto. Dentro 
desta pasta, você pode acessar a subpasta lcov-report para ver o relatório (report) e interagir com os 
arquivos, abrindo o arquivo index.html e navegando pelos arquivos.