https://cursos.alura.com.br/course/orm-nodejs-api-sequelize-mysql/task/115491
https://cursos.alura.com.br/course/orm-nodejs-api-sequelize-mysql/task/115542

--------------------------------------------------------------------------------

https://sequelize.org/master/manual/model-querying-finders.html#-code-findorcreate--code-

São constraints em SQL:

NOT NULL - garante que não exista nenhum valor NULL na coluna;
UNIQUE - Garante que não existam valores iguais em uma coluna;
PRIMARY KEY - Identifica cada linha em uma tabela através de um valor único (junção de NOT NULL e UNIQUE);
FOREIGN KEY - Identifica um valor único em outra tabela como chave;
CHECK - Garante que todos os valores em uma coluna satisfazem uma condição específica;
DEFAULT - Determina um valor padrão caso nenhum valor seja informado;
INDEX - Para criar índices e facilitar o acesso a determinados conjuntos de dados.

-------------------------------------------------------------------------------------------

Podemos resumir mixins em: classes que contêm métodos que podem ser utilizados por outras classes, 
sem a necessidade de herança direta. Dito de outra forma, um mixin fornece métodos que implementam 
um certo comportamento em objetos, sem poder ser utilizado sozinho, mas sim para adicionar esse 
comportamento a outras classes. No Sequelize, temos uma diferença entre escopos de modelo, que são 
aplicados em chamadas estáticas ao modelo (como no exemplo que fizemos no vídeo, 
Pessoas.scope('todos').findAll()), e escopos de associação, que são uma regra, ou um conjunto de 
atributos que são automaticamente aplicados em instâncias do modelo, como em P
essoas.associate = function(models) {...}.

Escopos de associação se comportam da mesma forma que os escopos de modelo, no sentido que ambos 
aplicam palavras-chave como WHERE em chamadas ao banco; mas os mixins são métodos que existem 
somente nas instâncias dos modelos: Pessoas.getPessoasMatriculadas, Niveis.getNiveisPorTurma, etc.

A lista de métodos criados automaticamente com as instâncias de modelo são:

addModel()

addModels()

countModels()

createModel()

getModels()

hasModel()

hasModels()

removeModel()

removeModels()

setModels()

Lembrando que “Model” e “Models”, aqui, refere-se ao nome do modelo! Lembre-se também que o 
Sequelize cria os nomes automaticamente mas não entende muito bem o singular e plural em 
português, mas você pode definir nomes personalizados para seus mixins.

----------------------------------------------------------------------------------------------

https://jvns.ca/blog/2019/10/03/sql-queries-don-t-start-with-select/
https://sequelize.org/master/manual/transactions.html