Até o momento utilizamos o flexbox que é uma propriedade razoavelmente atual. Portanto, é preciso ter cuidado 
ao utilizar essa propriedade, pois nem todos os navegadores a aceitam. Para descobrir em quais sistemas a 
propriedade funciona podemos consultar o site: http://caniuse.com/  basta digitar o nome da propriedade no 
campo de busca:

-----------------------------------------------------------------------------------------------------------------

Colocando display: 

    - inline nos elementos permite eles se posicionarem um do lado do outro, o problema do display: inline é 
    que os elementos não aceitam mais que seja modificada tanto a width quanto a height. Isso limita MUITO 
    nossas possibilidades.

    - inline-block permite os elementos se posicionarem um do lado do outro porém, diferentemente do 
    display: inline ele permite que os elementos tenham sua width e height modificadas. Por esse motivo o 
    display: inline-block é muito mais interessante na maioria dos casos do que o display: inline. O problema 
    de usar display: inline-block é espaçar os elementos entre si. Para fazer isso teríamos que colocar 
    margins e fazer contas.

    - flex veio com o intuito de facilitar nossa vida nesses aspectos de posicionamento. Ele permite os 
    elementos ficarem um do lado do outro, permite espaçar os elementos de forma mais intuitiva e sem ter que 
    fazer cálculos. Além disso ele também permite alinhar os elementos verticalmente de forma fácil. O display
    flex pode ser um pouco mais complicado de usar tendo em vista que existem diversas propriedades que vem 
    junto da especificação flexible box, todavia tudo isso foi feito para justamente melhorar nosso código.

float: left | right

    O float é mais complicado, ele empurra o elemento para um dos lados (left | right) e os elementos que 
    estão embaixo sobem. Isso nem sempre é o que a gente quer. Além do mais o float não permite que usemos a 
    propriedade vertical-align: middle para alinhar os elementos verticalmente. Ou seja, para contornar isso 
    uma possibilidade seria ter que colocar margin-top ou bottom nos elementos e usar os temidos números 
    mágicos!

---------------------------------------------------------------------------------------------------------------------

Podemos distribuir os elementos dentro do pai de diversas formas, podemos por exemplo:

Colocar todo espaço à esquerda, jogando o conteúdo para direita:
justify-content: flex-end;

Colocar todo espaço à direita, jogando o conteúdo para esquerda:
justify-content: flex-start; (que é o padrão).

Colocar todo espaço à esquerda e à direita, jogando o conteúdo para o meio:
justify-content: center;

Colocar todo espaço entre os elementos:
justify-content: space-between;

Colocar o espaço em volta dos elementos:
justify-content: space-around;

Para o flex não transbordar o conteúdo, de forma que quando o conteúdo ultrapassar 
o tamanho do pai, ele simplesmente quebre para uma próxima coluna:
flex-wrap: wrap;

--------------------------------------------------------------------------------------------

O melhor a se fazer aqui é ter em mente que o ideal é sempre que necessário consultar a documentação através 
desse site: https://css-tricks.com/snippets/css/a-guide-to-flexbox/

Lá podemos ver claramente quais propriedades são aplicadas ao container e aos flex items, não há necessidade 
de ficar decorando, isso virá naturalmente com a prática.

Seguindo a documentação temos:

container:

    * display: flex
    * flex-direction
    * justify-content
    * flex-wrap
    * flex-flow
    * align-items
    * align-content

flex item:

    * order
    * flex-grow
    * flex-shrink
    * flex-basis
    * flex
    * align-self 

Para praticar flexbox:  

http://flexboxfroggy.com/
http://www.flexboxdefense.com/

--------------------------------------------------------------------------------------------------------------