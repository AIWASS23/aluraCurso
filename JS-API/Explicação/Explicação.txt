https://www.alura.com.br/artigos/hoisting-no-javascript

https://cursos.alura.com.br/extra/alura-mais/o-que-e-javascript--c1311

Event loop: Mecanismo responsável por gerenciar o fluxo de execução do código assíncrono.
Call stack: Estrutura de dados que mantém o controle do contexto de execução do código.
Task queue: Estrutura de dados que contém as tarefas que estão prontas para serem executadas pelo Event Loop.

---------------------------------------------------------------------------------------------------------

https://cursos.alura.com.br/extra/alura-mais/o-que-e-uma-api--c697

CallBacks: É uma função que é passada como argumento para outra função, e é executada quando a função principal é concluída.
Promisses: É um objeto que representa uma operação assíncrona que pode ou não ser concluída com sucesso e retornar um valor.

-----------------------------------------------------------------------------------------------------------

Arrow Functions: 
As Arrow Functions são uma forma mais concisa de escrever funções em JavaScript. 
Elas foram introduzidas na versão ES6 (também conhecida como ES2015) da linguagem e são uma maneira 
mais clara e legível de criar funções que não precisam de um objeto this próprio e que precisam ser 
mais curtas.

https://www.alura.com.br/artigos/desmistificando-o-protocolo-http-parte-1
https://http.cat/
https://www.alura.com.br/artigos/comecando-com-fetch-no-javascript
https://cursos.alura.com.br/extra/alura-mais/javascript-assincrono-e-fetch-c93

Retorno de Requisições:

Uma requisição é composta de uma request (solicitação) e uma response (resposta). 
Request e Response são dois tipos de mensagem diferentes quando falamos de HTTP. 
A especificação HTTP diz exatamente o que podemos colocar dentro de cada um destes tipos de mensagem 
para que todos que "falem" o idioma HTTP consigam trocar informações corretamente.

Em uma response é retornado um response code (código de resposta) e um motivo, que dá significado ao 
código. A estrutura padrão desse código tem três dígitos, sendo o primeiro referente a classificação 
dele. Elas são:

1XX: Informativo – a solicitação foi aceita ou está em andamento;
2XX: Confirmação – a solicitação foi concluída ou entendida;
3XX: Redirecionamento – faltou alguma coisa na solicitação;
4XX: Erro do cliente – houve um erro na solicitação;
5XX: Erro no servidor – houve uma falha no servidor durante a solicitação.

------------------------------------------------------------------------------------------------------

https://www.alura.com.br/artigos/async-await-no-javascript-o-que-e-e-quando-usar

Quando produzimos um código assíncrono com o uso do .then nós fazemos uso de callback dentro deles. 
O maior problema com callbacks é que eles não são bem dimensionados mesmo para códigos assíncronos 
moderadamente complexos, onde temos vários .then em seguida do outro. O código resultante geralmente 
se torna difícil de ler, fácil de quebrar e difícil de depurar. Isso é o que chamamos de callback hell.

Para resolver isso, foi desenvolvido outra forma de construir um código assíncrono: o async await, que 
funciona de forma semelhante ao then mas o código fica mais “bonito”. Esse “embelezamento” em códigos 
é o que chamamos de syntax sugar.

Em ciência da computação, syntax sugar ou açúcar sintático (em tradução literal), é a sintaxe dentro 
de uma linguagem de programação que foi concebido para tornar as coisas mais fáceis de ler ou 
expressar. Isso torna a linguagem "mais doce" para uso humano: as coisas podem ser expressas de forma 
mais clara, de forma mais concisa, ou em um estilo alternativo que alguns podem preferir.

O async/await apesar de ser uma opção mais "legível" ao .then() é importante frisar que não são 
logicamente equivalentes: o async/await faz o processamento de forma sequencial, Promises com .then() 
são processadas em paralelo, o que faz com que este método seja mais rápido. O async/await simplifica 
a escrita e a interpretação do código, mas não é tão flexível e só funciona com uma Promise por vez.

---------------------------------------------------------

https://www.alura.com.br/artigos/como-colocar-projeto-no-ar-com-github-pages

getElementById: 
é um método em JavaScript que é usado para acessar um elemento HTML em uma página da Web pelo seu ID. 
Ele é usado para acessar um único elemento do DOM (Document Object Model) pelo seu ID exclusivo. 
É um dos métodos mais comuns usados para manipular elementos HTML na página da Web usando JavaScript.

addEventListener:
é um método em JavaScript que permite adicionar um ouvinte de eventos a um elemento HTML na página da 
Web. Com o addEventListener, você pode especificar que uma função JavaScript deve ser executada sempre 
que ocorrer um determinado evento em um elemento, como um clique do mouse, uma submissão de formulário 
ou uma mudança de valor em um campo de entrada.

innerHTML:
é uma propriedade do objeto Element em JavaScript que permite acessar ou definir o conteúdo HTML de um 
elemento na página da web. Ela pode ser usada para modificar o conteúdo de um elemento HTML sem 
precisar manipular diretamente o DOM (Document Object Model).

